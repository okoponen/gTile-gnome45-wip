load("@rules_pkg//pkg/private/tar:tar.bzl", "pkg_tar")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("@aspect_rules_rollup//rollup:defs.bzl", "rollup_bundle")
load("@npm//:defs.bzl", "npm_link_all_packages")
load(":execute.bzl", "concat")
load("@jasmine//:defs.bzl", "jasmine_test")

package(default_visibility = ["//:__subpackages__"])

# Defines all of the //:node_modules/foo/bar targets where foo/bar is the npm
# package name.
npm_link_all_packages(name = "node_modules")

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = [":__subpackages__"],
)

ts_config(
    name = "tsconfig-app",
    src = "tsconfig-app.json",
    visibility = [":__subpackages__"],
    deps = [
      "tsconfig.json",
    ]
)

ts_config(
    name = "tsconfig-tools",
    src = "tsconfig-tools.json",
    visibility = [":__subpackages__"],
)

# Building the distribution.

# Install the extension to ~/.local/share/gnome-shell/extensions
sh_binary(
    name = "install-extension",
    srcs = ["install-extension.sh"],
    data = [":dist.tar.gz"],
    deps = ["@bazel_tools//tools/bash/runfiles"],
)

sh_binary(
    name = "concat",
    srcs = ["concat.sh"],
)

# Output a dist.tar.gz folder to bazel-bin for distribution.
pkg_tar(
    name = "dist",
    srcs = [":dist_files"],
    extension = "tar.gz",
    mode = "0664",
    strip_prefix = ".",
)

filegroup(
    name = "dist_files",
    srcs = [
        "extension.js",
        "metadata.json",
        "prefs.js",
        "//schemas:gschemas.compiled",
        "//schemas:org.gnome.shell.extensions.gtile.gschema.xml",
        "settings.js",
        "stylesheet.css",
        "LICENSE"
    ] + glob([
        "images/**/*.png",
    ]),
)

exports_files([
    "tsconfig.json",
    "tsconfig-app.json",
    "tsconfig-tools.json",
])

ts_project(
    name = "app_lib",
    srcs = ["app.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [
        ":gnometypes_lib",
        ":hotkeys_lib",
        ":logging_lib",
        ":settings_data_lib",
        ":shellversion_lib",
        ":snaptoneighbors_lib",
        ":tilespec_lib",
        ":preset_parser_lib"
    ],
)

ts_project(
    name = "gnometypes_lib",
    srcs = ["gnometypes.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [
    ],
)

ts_project(
    name = "hotkeys_lib",
    srcs = ["hotkeys.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [
        ":logging_lib",
        ":settings_data_lib",
    ],
)

ts_project(
    name = "logging_lib",
    srcs = ["logging.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [
    ],
)

ts_project(
    name = "settings_data_lib",
    srcs = ["settings_data.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [],
)


ts_project(
    name = "shellversion_lib",
    srcs = ["shellversion.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [
        ":logging_lib",
    ],
)

ts_project(
    name = "snaptoneighbors_lib",
    srcs = ["snaptoneighbors.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [
        ":logging_lib",
        ":gnometypes_lib",
    ],
)

ts_project(
    name = "preset_parser_lib",
    srcs = ["preset_parser.ts"],
    tsconfig = "//:tsconfig.json",
    declaration = True,
    deps = [
        ":tilespec_lib"
    ]
)


ts_project(
    name = "tilespec_lib",
    srcs = ["tilespec.ts"],
    tsconfig = "//:tsconfig",
    declaration = True,
)

ts_project(
    name = "entry_lib",
    srcs = ["entry.ts"],
    tsconfig = "//:tsconfig-app",
    declaration = True,
    deps = [":app_lib"],
)

ts_project(
    name = "tests",
    testonly = 1,
    tsconfig = "//:tsconfig",
    declaration = True,
    srcs = [
        "shellversion.spec.ts",
        "tilespec.spec.ts",
    ],
    deps = [
        ":shellversion_lib",
        ":tilespec_lib",
        ":preset_parser_lib",
        ":node_modules/@types/chai",
        ":node_modules/@types/jasmine",
        ":node_modules/chai",
        ":node_modules/jasmine",
    ],
)

rollup_bundle(
    name = "shellversion_test_bundle",
    entry_point = "shellversion.spec.js",
    format = "cjs",
    output_dir = False,
    deps = [":tests"],
    testonly = 1,
)

jasmine_test(
    name = "test_shellversion",
    args = ["shellversion_test_bundle.js"],
    data = [
        ":shellversion_test_bundle",
    ],
)

rollup_bundle(
    name = "tilespec_test_bundle",
    entry_point = "tilespec.spec.js",
    format = "cjs",
    output_dir = False,
    deps = [":tests"],
    testonly = 1,
)

jasmine_test(
    name = "test_tilespec",
    args = ["tilespec_test_bundle.js"],
    data = [
        ":tilespec_test_bundle",
    ],
)

rollup_bundle(
    name = "bundle",
    entry_point = "entry.js",
    deps = [":entry_lib"],
)

concat(
    name = "extension",
    srcs = [
        # Order matters here. Setup.js must come first.
        "setup.js",
        "polyfill.js",
        "bundle.js",
    ],
    out = "extension.js",
)
